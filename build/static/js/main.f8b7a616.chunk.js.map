{"version":3,"sources":["Context.js","components/Weather.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["WeatherContext","React","createContext","WeatherProvider","Consumer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","weatherData","undefined","init","fetch","ip","json","ipDetails","console","log","url","city","country","apiCall","response","setState","react_default","a","createElement","Provider","value","objectSpread","children","Component","withRouter","useContext","img","concat","Math","floor","random","date","Date","currentDay","getDay","currentDate","getDate","temperature","main","temp","name","getName","sys","currentTime","toLocaleString","hour","minute","hour12","weatherType","weather","description","sunrise","sunset","react","style","backgroundImage","height","width","className","AppRouter","react_router","path","component","Weather","App","react_router_dom","Context","routes","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAEMA,EAAiBC,IAAMC,gBAqCdC,GApCgBH,EAAeI,qBAI1C,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACfG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KAGVQ,MAAQ,CACJC,iBAAaC,GAHbT,EAAKU,OAFUV,4MASEW,MAAM,wCAAjBC,kBACkBA,EAAGC,qBAArBC,SACNC,QAAQC,IAAIF,GACG,mCACTG,6DAA0DH,EAAUI,iBAAQJ,EAAUK,0BAD7E,8DAEOR,MAAMM,kBAAtBG,mBACiBA,EAAQP,eAAzBQ,SACNlB,KAAKmB,SAAS,CACVd,YAAaa,wIAKjB,OACIE,EAAAC,EAAAC,cAAC/B,EAAegC,SAAhB,CAAyBC,MAAK1B,OAAA2B,EAAA,EAAA3B,CAAA,GACvBE,KAAKI,QAEPJ,KAAKJ,MAAM8B,iBA3BEC,cCiDfC,qBA9CC,SAAChC,GACb,IACQS,EADawB,qBAAWtC,GACxBc,YAERO,QAAQC,IAAI,gBAAiBR,GAC7B,IACMyB,EAAG,4BAAAC,OAA+BC,KAAKC,MAAsB,IAAhBD,KAAKE,UAA/C,cAEHC,EAAO,IAAIC,KACXC,EAJO,CAAC,SAAU,UAAW,YAAa,WAAY,SAAU,WAAY,UAI1DF,EAAKG,SAAW,GAClCC,EAAcJ,EAAKK,UACnBC,EAAcpC,GAAeA,EAAYqC,KAAKC,KAC9C5B,EAAOV,GAAeA,EAAYuC,KAClC5B,EAAUX,GAAewC,kBAAQxC,EAAYyC,IAAI9B,SAEjD+B,GADO,IAAIX,MACQY,eAAe,QAAS,CAAEC,KAAM,UAAWC,OAAQ,UAAWC,QAAQ,IACzFC,EAAc/C,GAAeA,EAAYgD,QAAQ,GAAGC,YACpDC,EAAUlD,GAAe,IAAI+B,KAA+B,IAA1B/B,EAAYyC,IAAIS,SAAgBP,eAAe,QAAS,CAAEC,KAAM,UAAWC,OAAQ,UAAWC,QAAQ,IACxIK,EAASnD,GAAe,IAAI+B,KAA8B,IAAzB/B,EAAYyC,IAAIU,QAAeR,eAAe,QAAS,CAAEC,KAAM,UAAWC,OAAQ,UAAWC,QAAQ,IAE5I,OADAvC,QAAQC,IAAI0C,GAERnC,EAAAC,EAAAC,cAACmC,EAAA,SAAD,KACIrC,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,gBAAe,OAAA5B,OAASD,EAAT,KAAiB8B,OAAQ,QAASC,MAAO,UACtEzC,EAAAC,EAAAC,cAAA,OAAKwC,UAAW,WACZ1C,EAAAC,EAAAC,cAAA,OAAKwC,UAAW,YACZ1C,EAAAC,EAAAC,cAAA,UAAKyB,GACL3B,EAAAC,EAAAC,cAAA,aAAAS,OAAQM,EAAR,MAAAN,OAAuBQ,IACvBnB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGwC,UAAU,uBACjB1C,EAAAC,EAAAC,cAAA,QAAMwC,UAAW,eAAgBV,GACjChC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGwC,UAAU,4BADjB,GAAA/B,OAEQU,GAFR,aAIArB,EAAAC,EAAAC,cAAA,YAAAS,OACQhB,EADR,MAAAgB,OACiBf,IAEjBI,EAAAC,EAAAC,cAAA,MAAIwC,UAAW,cACX1C,EAAAC,EAAAC,cAAA,UAAK,WAAL,IAAiBF,EAAAC,EAAAC,cAAA,YAAOiC,IACxBnC,EAAAC,EAAAC,cAAA,UAAK,UAAL,IAAgBF,EAAAC,EAAAC,cAAA,YAAOkC,WCjChCO,EANG,kBACd3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACI5C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWC,MCWpBC,mLAVX,OACEhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,KACEjD,EAAAC,EAAAC,cAACgD,EAAD,KACElD,EAAAC,EAAAC,cAACiD,EAAD,eALQ5C,aCGE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f8b7a616.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst WeatherContext = React.createContext();\nexport const WeatherConsumer = WeatherContext.Consumer;\nexport { WeatherContext };\n\nclass WeatherProvider extends Component {\n    constructor(props) {\n        super(props);\n        this.init();\n    }\n    state = {\n        weatherData: undefined\n    }\n\n    async init() {\n        const ip = await fetch('http://ip-api.com/json');\n        const ipDetails = await ip.json();\n        console.log(ipDetails);\n        const apiKey = '8eb6e6c99cd310fb293295ce3ad195bb';\n        const url = `http://api.openweathermap.org/data/2.5/weather?q=${ipDetails.city},${ipDetails.country}&appid=${apiKey}&units=metric`\n        const apiCall = await fetch(url);\n        const response = await apiCall.json();\n        this.setState({\n            weatherData: response\n        });\n    }\n\n    render() {\n        return (\n            <WeatherContext.Provider value={{\n                ...this.state,\n            }}>\n                {this.props.children}\n            </WeatherContext.Provider>\n        )\n    }\n}\n\nexport default WeatherProvider;","import React, { useContext, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom'\n\nimport { getName } from 'country-list';\n\nimport { WeatherContext } from '../Context';\n\nimport '../styles/weather.css';\n\nconst Weather = (props) => {\n    const weatherState = useContext(WeatherContext);\n    const { weatherData } = weatherState;\n\n    console.log('weatherData: ', weatherData);\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n    const img = `https://picsum.photos/id/${Math.floor(Math.random() * 100)}/1920/1080`;\n\n    const date = new Date();\n    const currentDay = days[date.getDay() - 1];\n    const currentDate = date.getDate();\n    const temperature = weatherData && weatherData.main.temp;\n    const city = weatherData && weatherData.name;\n    const country = weatherData && getName(weatherData.sys.country);\n    const Time = new Date();\n    const currentTime = Time.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n    const weatherType = weatherData && weatherData.weather[0].description;\n    const sunrise = weatherData && new Date(weatherData.sys.sunrise * 1000).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n    const sunset = weatherData && new Date(weatherData.sys.sunset * 1000).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n    console.log(sunrise);\n    return (\n        <Fragment>\n            <div style={{ backgroundImage: `url(${img})`, height: '100vh', width: '100%' }} />\n            <div className={'overlay'}>\n                <div className={'column-1'}>\n                    <h4>{currentTime}</h4>\n                    <h3>{`${currentDay}, ${currentDate}`}</h3>\n                    <h2><i className=\"fas fa-cloud-moon\" /></h2>\n                    <span className={'description'}>{weatherType}</span>\n                    <h1>\n                        <i className=\"fas fa-thermometer-full\"></i>\n                        {`${temperature}`}&deg;&nbsp;C\n                    </h1>\n                    <p>\n                        {`${city}, ${country}`}\n                    </p>\n                    <ul className={'list-items'}>\n                        <li>{\"Sunrise:\"} <span>{sunrise}</span></li>\n                        <li>{\"Sunset:\"} <span>{sunset}</span></li>\n                    </ul>\n                </div>\n            </div>\n        </Fragment>\n    )\n};\n\nexport default withRouter(Weather);\n","import React from \"react\";\nimport {\n    Route,\n    Switch,\n} from \"react-router-dom\";\n\nimport Weather from '../src/components/Weather';\n\nconst AppRouter = () => (\n    <Switch>\n        <Route path=\"/\" component={Weather} />\n    </Switch>\n);\n\nexport default AppRouter;","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\n\nimport AppRouter from './routes';\n\nimport WeatherProvider from './Context';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <WeatherProvider>\n          <AppRouter />\n        </WeatherProvider>\n      </Router>\n    )\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}